// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: serials.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface GetSerialsRequest {
  Iccid: string;
  sortby: string;
  sorttype: string;
  currentPage: number;
}

export interface GetSerialsResponse {
  guides: Serial[];
  count: number;
}

export interface Serial {
  iccid: string;
  otherField: string;
}

function createBaseGetSerialsRequest(): GetSerialsRequest {
  return { Iccid: "", sortby: "", sorttype: "", currentPage: 0 };
}

export const GetSerialsRequest = {
  encode(message: GetSerialsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Iccid !== "") {
      writer.uint32(10).string(message.Iccid);
    }
    if (message.sortby !== "") {
      writer.uint32(18).string(message.sortby);
    }
    if (message.sorttype !== "") {
      writer.uint32(26).string(message.sorttype);
    }
    if (message.currentPage !== 0) {
      writer.uint32(32).int32(message.currentPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSerialsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSerialsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Iccid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sortby = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sorttype = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.currentPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSerialsRequest {
    return {
      Iccid: isSet(object.Iccid) ? globalThis.String(object.Iccid) : "",
      sortby: isSet(object.sortby) ? globalThis.String(object.sortby) : "",
      sorttype: isSet(object.sorttype) ? globalThis.String(object.sorttype) : "",
      currentPage: isSet(object.currentPage) ? globalThis.Number(object.currentPage) : 0,
    };
  },

  toJSON(message: GetSerialsRequest): unknown {
    const obj: any = {};
    if (message.Iccid !== "") {
      obj.Iccid = message.Iccid;
    }
    if (message.sortby !== "") {
      obj.sortby = message.sortby;
    }
    if (message.sorttype !== "") {
      obj.sorttype = message.sorttype;
    }
    if (message.currentPage !== 0) {
      obj.currentPage = Math.round(message.currentPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSerialsRequest>, I>>(base?: I): GetSerialsRequest {
    return GetSerialsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSerialsRequest>, I>>(object: I): GetSerialsRequest {
    const message = createBaseGetSerialsRequest();
    message.Iccid = object.Iccid ?? "";
    message.sortby = object.sortby ?? "";
    message.sorttype = object.sorttype ?? "";
    message.currentPage = object.currentPage ?? 0;
    return message;
  },
};

function createBaseGetSerialsResponse(): GetSerialsResponse {
  return { guides: [], count: 0 };
}

export const GetSerialsResponse = {
  encode(message: GetSerialsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.guides) {
      Serial.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSerialsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSerialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.guides.push(Serial.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSerialsResponse {
    return {
      guides: globalThis.Array.isArray(object?.guides) ? object.guides.map((e: any) => Serial.fromJSON(e)) : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: GetSerialsResponse): unknown {
    const obj: any = {};
    if (message.guides?.length) {
      obj.guides = message.guides.map((e) => Serial.toJSON(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSerialsResponse>, I>>(base?: I): GetSerialsResponse {
    return GetSerialsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSerialsResponse>, I>>(object: I): GetSerialsResponse {
    const message = createBaseGetSerialsResponse();
    message.guides = object.guides?.map((e) => Serial.fromPartial(e)) || [];
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseSerial(): Serial {
  return { iccid: "", otherField: "" };
}

export const Serial = {
  encode(message: Serial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.iccid !== "") {
      writer.uint32(10).string(message.iccid);
    }
    if (message.otherField !== "") {
      writer.uint32(18).string(message.otherField);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Serial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSerial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iccid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.otherField = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Serial {
    return {
      iccid: isSet(object.iccid) ? globalThis.String(object.iccid) : "",
      otherField: isSet(object.otherField) ? globalThis.String(object.otherField) : "",
    };
  },

  toJSON(message: Serial): unknown {
    const obj: any = {};
    if (message.iccid !== "") {
      obj.iccid = message.iccid;
    }
    if (message.otherField !== "") {
      obj.otherField = message.otherField;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Serial>, I>>(base?: I): Serial {
    return Serial.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Serial>, I>>(object: I): Serial {
    const message = createBaseSerial();
    message.iccid = object.iccid ?? "";
    message.otherField = object.otherField ?? "";
    return message;
  },
};

export interface SerialService {
  GetSerials(request: GetSerialsRequest): Promise<GetSerialsResponse>;
}

export const SerialServiceServiceName = "SerialService";
export class SerialServiceClientImpl implements SerialService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SerialServiceServiceName;
    this.rpc = rpc;
    this.GetSerials = this.GetSerials.bind(this);
  }
  GetSerials(request: GetSerialsRequest): Promise<GetSerialsResponse> {
    const data = GetSerialsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSerials", data);
    return promise.then((data) => GetSerialsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
